# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import re
from io import BytesIO

st.set_page_config(page_title="–†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ WB (Wildberries)", layout="wide")
st.title("üì¶ –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ Wildberries (WB)")

# -------------------- –£—Ç–∏–ª–∏—Ç—ã --------------------
def normalize_art(x):
    if pd.isna(x):
        return None
    s = str(x).strip()
    s = s.replace('.0', '')
    s = re.sub(r"^0+", "", s)
    s = s.replace('\u200b', '')  # zero-width if any
    return s if s != '' else None


def to_float_safe(x):
    try:
        if pd.isna(x):
            return 0.0
        s = str(x)
        s = re.sub(r"[^\d\-\,\.]", "", s)
        s = s.replace(',', '.')
        if s == '':
            return 0.0
        return float(s)
    except Exception:
        return 0.0


def detect_tech_price_col(df):
    # Try to find obvious column by name
    candidates = [c for c in df.columns if isinstance(c, str)]
    for c in candidates:
        name = c.lower()
        if '—Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥' in name or ('—Ü–µ–Ω–∞' in name and '—Å–∫–∏–¥' in name) or 'm' == name.strip().lower():
            return c
    # fallback to column index 12 (M) if exists
    if df.shape[1] > 12:
        return df.columns[12]
    # else choose numeric column with most non-nulls
    best = None
    best_cnt = -1
    for c in df.columns:
        cnt = pd.to_numeric(df[c], errors='coerce').notnull().sum()
        if cnt > best_cnt:
            best_cnt = cnt
            best = c
    return best


def detect_tech_art_col(df):
    # prefer explicit names
    for c in df.columns:
        if isinstance(c, str) and ('–∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤' in c.lower() or '–∞—Ä—Ç–∏–∫—É–ª wb' in c.lower() or c.lower().startswith('–∞—Ä—Ç–∏–∫—É–ª')):
            return c
    # fallback to any column with many numeric values
    best = None
    best_cnt = -1
    for c in df.columns:
        cnt = pd.to_numeric(df[c], errors='coerce').notnull().sum()
        if cnt > best_cnt:
            best_cnt = cnt
            best = c
    return best


def find_best_new_art_col(new_df, tech_seller_set):
    # new_df is usually read with header=None -> columns are 0..n
    best_col = None
    best_matches = 0
    for c in new_df.columns:
        # normalize values in this column
        vals = new_df[c].dropna().astype(str).map(lambda x: normalize_art(x))
        matches = len(set(vals.dropna().unique()) & tech_seller_set)
        if matches > best_matches:
            best_matches = matches
            best_col = c
    return best_col, best_matches


# -------------------- UI: –∑–∞–≥—Ä—É–∑–∫–∞ --------------------
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã: \n- `—Ç–µ—Ö–Ω–æ` (—Ñ–∞–π–ª —Å –∫–æ–ª–æ–Ω–∫–æ–π '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π', –æ–±—ã—á–Ω–æ `—Ç–µ—Ö–Ω–æ.xlsx`)\n- `–ù–æ–≤—ã–π` (—Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∑–∞–∫—É–ø–æ—á–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏)\n")
tech_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (—Ç–µ—Ö–Ω–æ.xlsx) ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π' (—Å—Ç–æ–ª–±–µ—Ü M)", type=["xlsx", "xls"]) 
new_file = st.file_uploader("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª (–ù–æ–≤—ã–π.xlsx) ‚Äî —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏ –∑–∞–∫—É–ø–∫–∏ (–æ–±—ã—á–Ω–æ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)", type=["xlsx", "xls"]) 

if tech_file and new_file:
    # —á–∏—Ç–∞–µ–º —Ç–µ—Ö–Ω–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    try:
        tech_df = pd.read_excel(tech_file, sheet_name=0, engine='openpyxl')
    except Exception:
        tech_df = pd.read_excel(tech_file, sheet_name=0)

    # —á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
    try:
        new_df = pd.read_excel(new_file, sheet_name=0, header=None, engine='openpyxl')
    except Exception:
        new_df = pd.read_excel(new_file, sheet_name=0, header=None)

    st.sidebar.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é)")

    # –ø–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    tech_price_col = detect_tech_price_col(tech_df)
    tech_art_col = detect_tech_art_col(tech_df)

    tech_cols = list(tech_df.columns)
    tech_price_col_user = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å '–¶–µ–Ω–æ–π —Å–æ —Å–∫–∏–¥–∫–æ–π' (—Ç–µ—Ö–Ω–æ)", options=tech_cols, index=tech_cols.index(tech_price_col) if tech_price_col in tech_cols else 0)
    tech_art_col_user = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞' (—Ç–µ—Ö–Ω–æ)", options=tech_cols, index=tech_cols.index(tech_art_col) if tech_art_col in tech_cols else 0)

    # —Å–æ–∑–¥–∞—ë–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ
    tech_df['seller_art_norm'] = tech_df[tech_art_col_user].apply(normalize_art)
    tech_seller_set = set(tech_df['seller_art_norm'].dropna().astype(str))

    # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    best_new_art_col, matches = find_best_new_art_col(new_df, tech_seller_set)
    st.sidebar.write(f"–ê–≤—Ç–æ: –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ: {best_new_art_col} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches})")

    new_cols = list(new_df.columns)
    new_art_col_user = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –≤ '–ù–æ–≤—ã–π.xlsx'", options=new_cols, index=new_cols.index(best_new_art_col) if best_new_art_col in new_cols else 3)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∑–∞–∫—É–ø–∫–∏: –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–≤–µ —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π
    numeric_counts = []
    for c in new_df.columns:
        if c == new_art_col_user:
            continue
        cnt = pd.to_numeric(new_df[c], errors='coerce').notnull().sum()
        numeric_counts.append((c, cnt))
    numeric_counts.sort(key=lambda x: x[1], reverse=True)
    default_p1 = numeric_counts[0][0] if len(numeric_counts) > 0 else None
    default_p2 = numeric_counts[1][0] if len(numeric_counts) > 1 else default_p1

    col_purchase_1 = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –∑–∞–∫—É–ø–∫–∏ (1)", options=new_cols, index=new_cols.index(default_p1) if default_p1 in new_cols else 8)
    col_purchase_2 = st.sidebar.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –∑–∞–∫—É–ø–∫–∏ (2)", options=new_cols, index=new_cols.index(default_p2) if default_p2 in new_cols else 10)

    # –ß–∏—Å—Ç–∏–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    tech_df = tech_df[tech_df[tech_art_col_user].notna()].copy()
    tech_df['seller_art_norm'] = tech_df[tech_art_col_user].apply(normalize_art)

    new_df = new_df[new_df[new_art_col_user].notna()].copy()
    new_df['art_norm'] = new_df[new_art_col_user].apply(normalize_art)

    # –ö–æ–ª–æ–Ω–∫–∏ –∑–∞–∫—É–ø–∫–∏ –∫–∞–∫ —á–∏—Å–ª–∞
    new_df['purchase_1'] = new_df[col_purchase_1].apply(to_float_safe)
    new_df['purchase_2'] = new_df[col_purchase_2].apply(to_float_safe)

    # –°–ª–∏–≤–∞–µ–º –ø–æ seller_art_norm == art_norm
    merged = pd.merge(
        tech_df,
        new_df[['art_norm', 'purchase_1', 'purchase_2']],
        left_on='seller_art_norm',
        right_on='art_norm',
        how='inner'
    )

    st.write(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: {len(merged)}")

    # –í—ã—á–∏—Å–ª–µ–Ω–∏—è
    price_col = tech_price_col_user
    merged['price_discount'] = merged[price_col].apply(to_float_safe)
    merged['price_after_35pct'] = (merged['price_discount'] * 0.65).round(2)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Ö–Ω—é—é/–Ω–∏–∂–Ω—é—é –∑–∞–∫—É–ø–∫—É –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
    merged['purchase_upper'] = merged[['purchase_1', 'purchase_2']].max(axis=1)
    merged['purchase_lower'] = merged[['purchase_1', 'purchase_2']].min(axis=1)

    merged['profit_upper'] = (merged['price_after_35pct'] - merged['purchase_upper']).round(2)
    merged['profit_lower'] = (merged['price_after_35pct'] - merged['purchase_lower']).round(2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    out_cols = [
        tech_art_col_user,
        'seller_art_norm',
        price_col,
        'price_discount',
        'price_after_35pct',
        'purchase_upper',
        'purchase_lower',
        'profit_upper',
        'profit_lower'
    ]

    df_out = merged[out_cols].copy()
    df_out = df_out.rename(columns={
        tech_art_col_user: '–ê—Ä—Ç–∏–∫—É–ª WB (–æ—Ä–∏–≥)',
        'seller_art_norm': '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ (normalized)',
        price_col: '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (–∏—Å—Ö.)',
    })

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    def color_profit(val):
        if pd.isna(val):
            return ''
        return f"color: {'green' if val > 0 else 'red'}; font-weight: bold"

    # –í–∫–ª–∞–¥–∫–∏: –æ–±—â–∏–π —Ä–∞—Å—á—ë—Ç –∏ –æ–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª
    tab1, tab2 = st.tabs(["üìë –û–±—â–∏–π —Ä–∞—Å—á—ë—Ç", "üîç –û–¥–∏–Ω –∞—Ä—Ç–∏–∫—É–ª"]) 

    with tab1:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è WB")
        st.dataframe(df_out.style.applymap(color_profit, subset=['profit_upper', 'profit_lower']), use_container_width=True)

        # –í—ã–≥—Ä—É–∑–∫–∞
        buffer = BytesIO()
        with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
            df_out.to_excel(writer, index=False, sheet_name='WB_profit')
        st.download_button("üíæ –°–∫–∞—á–∞—Ç—å Excel", data=buffer.getvalue(), file_name="wb_profit.xlsx", mime="application/vnd.ms-excel")

    with tab2:
        st.subheader("–ü–æ–∏—Å–∫ –ø–æ –æ–¥–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–¥–∞–≤—Ü–∞")
        art_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ (–∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)")
        if art_input:
            art_n = normalize_art(art_input)
            row = merged[merged['seller_art_norm'] == art_n]
            if row.empty:
                st.error('–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            else:
                r = row.iloc[0]
                st.write(f"**–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞:** {r['seller_art_norm']}")
                st.write(f"**–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π (–∏—Å—Ö.):** {r['price_discount']} ‚ÇΩ")
                st.write(f"**–¶–µ–Ω–∞ –ø–æ—Å–ª–µ -35%:** {r['price_after_35pct']} ‚ÇΩ")
                st.write(f"**–ó–∞–∫—É–ø–∫–∞ –≤–µ—Ä—Ö–Ω—è—è:** {r['purchase_upper']} ‚ÇΩ, **–Ω–∏–∂–Ω—è—è:** {r['purchase_lower']} ‚ÇΩ")
                st.write(f"**–ü—Ä–∏–±—ã–ª—å –≤–µ—Ä—Ö–Ω—è—è:** {r['profit_upper']} ‚ÇΩ, **–Ω–∏–∂–Ω—è—è:** {r['profit_lower']} ‚ÇΩ")

else:
    st.info('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ (—Ç–µ—Ö–Ω–æ –∏ –ù–æ–≤—ã–π) —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—á—ë—Ç.')

# –ö–æ–Ω–µ—Ü —Å–∫—Ä–∏–ø—Ç–∞
